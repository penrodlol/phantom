---
import type { HTMLAttributes } from 'astro/types';
import { tv, type VariantProps } from 'tailwind-variants';

type Props = HTMLAttributes<'button'> & VariantProps<typeof buttonVariants>;

// prettier-ignore
export const buttonVariants = tv({
  base:
    'inline-flex items-center justify-center gap-2 whitespace-nowrap rounded font-medium ' +
    'focus-visible:ring-1 focus-visible:outline-none motion-safe:transition-colors ' +
    'disabled:opacity-50 disabled:pointer-events-none',
  defaultVariants: { color: 'primary', size: 'md' },
  variants: {
    outline: { true: 'border [&:not(:hover)]:bg-transparent' },
    color: {
      primary: 'bg-surface-primary text-foreground-primary hover:bg-surface-primary/80',
      secondary: 'bg-surface-secondary text-foreground-secondary hover:bg-surface-secondary/80',
      accent: 'bg-surface-accent text-foreground-accent hover:bg-surface-accent/80',
      neutral: 'bg-surface-neutral text-foreground-neutral hover:bg-surface-neutral/80',
      ghost: 'hover:bg-surface-neutral/80 hover:text-foreground-neutral',
      danger: 'bg-surface-danger text-foreground-danger hover:bg-surface-danger/80',
    },
    size: {
      sm: 'h-8 px-3 text-sm',
      md: 'h-9 px-4 text-base',
      lg: 'h-10 px-5 text-md',
      icon: 'size-8 *:size-4',
    },
  },
  compoundVariants: [
    { outline: true, color: 'primary', class: 'border-surface-primary text-foreground-primary-outline hover:bg-surface-primary/20' },
    { outline: true, color: 'secondary', class: 'border-surface-secondary text-foreground-secondary-outline hover:bg-surface-secondary/20' },
    { outline: true, color: 'accent', class: 'border-surface-accent text-foreground-accent-outline hover:bg-surface-accent/20' },
    { outline: true, color: 'neutral', class: 'border-surface-neutral text-foreground-neutral-outline hover:bg-surface-neutral/20' },
    { outline: true, color: 'danger', class: 'border-surface-danger text-foreground-danger-outline hover:bg-surface-danger/20' }, 
  ],
});

const { class: className, type, color, size, outline, ...props } = Astro.props;
---

<button
  {...props}
  type={type ?? 'button'}
  class={buttonVariants({ color, size, outline, className })}
>
  <slot />
</button>
